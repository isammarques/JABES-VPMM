---
title: VPMM Sim Example
author: wiep & isammarques
date: 5/22/2023
format:
  html:
    fig-width: 8
    fig-height: 4
    code-fold: false
jupyter: python3
---

## Load packages

```{python}
#| output: false
#| warning: false

import jax.numpy as jnp
import liesel.goose as gs
import matplotlib.pylab as plt
import numpy as np
import scipy.spatial as spat
from scipy.stats import multivariate_normal

import vpmm.model as vpmm
from vpmm.covarfun import exponential_covariance
```

## Generate Data

Set a seed for generating the data.

```{python}
np.random.seed(2)
```

Specify datasize and set parameter values.

```{python}
npoints_lvl1 = 60
npoints_lvl2 = 27

beta = np.array([1.0])
design_mat = np.array([np.ones(npoints_lvl1 * npoints_lvl2)]).T
variance = 2.0
kappa_b = 3 / 0.5  # = 6;    ln = 1.7917594692
kappa_w = 3 / 0.7  # = 4.28; ln = 1.4552872326
weights = vpmm.Weights(0.1, 0.35, 0.35, 0.2)
print(f"weight values on the simples: {weights.to_stan_simplex()}.")
```

Draw locations of plots and observations within the plots.

```{python}
loc_plot = np.random.uniform(size=(npoints_lvl1, 2))
loc_obs = np.random.uniform(size=(npoints_lvl2, 2))
```

```{python}
#| echo: false
fig, axs = plt.subplots(1, 2, figsize=(10, 5))
axs[0].scatter(loc_plot[:, 0], loc_plot[:, 1])
axs[0].title.set_text("locations of plots")
axs[1].scatter(loc_obs[:, 0], loc_obs[:, 1])
axs[1].title.set_text("locations of observations")
plt.show()
```

Calculate distances, covariance matices, and draw the random quantities.
Then. put everything together to get the response.

```{python}
# distances
dist_areas = spat.distance_matrix(loc_plot, loc_plot)
dist_obs = spat.distance_matrix(loc_obs, loc_obs)

# Calc covariance matrices and draw spatial effects

# between
sigma_b = exponential_covariance(dist_areas, kappa_b, 1.0)

gamma_b = multivariate_normal.rvs(cov=sigma_b, size=1)
# print(f"gamma_b {gamma_b}")

gamma_b_kron = np.array(np.kron(gamma_b, np.ones(dist_obs.shape[0])))

# within
sigma_w = exponential_covariance(dist_obs, kappa_w, 1.0)

sigma_w_repeated = np.kron(np.eye(np.shape(sigma_b)[0]), sigma_w)
gamma_w = multivariate_normal.rvs(cov=sigma_w_repeated, size=1)

# interaction
sigma_inter = np.kron(sigma_b, sigma_w)
gamma_inter = multivariate_normal.rvs(cov=sigma_inter, size=1)

# draw nugget
eps = np.random.normal(0, scale=1.0, size=sigma_b.shape[0] * sigma_w.shape[0])


# put it all all together
response = design_mat @ beta + np.sqrt(variance) * (
    np.sqrt(weights.between) * gamma_b_kron
    + np.sqrt(weights.within) * gamma_w
    + np.sqrt(weights.interaction) * gamma_inter
    + np.sqrt(weights.nugget) * eps
)
```

## Setup Model

```{python}
# Build the model
builder = vpmm.M4Builder(response, design_mat, loc_plot, loc_obs)

# set duration of warm up phase and posterior sampling phase
builder.dur_warmup = 2000
builder.dur_term = 300
builder.dur_posterior = 2000
builder.track_gamma_b = False

# set number of chains
builder.num_chains = 2


# change the priors default values
# builder.priors.weights = vpmm.SimplexPriorStan(weights)

# change the inital values
# builder.init_params.weights_unconst = weights.to_stan_simplex()

# builder.init_params.beta = jnp.array([1.0])
# builder.init_params.log_variance = jnp.log(variance)
# builder.init_params.gamma_b = gamma_b

# builder.init_params.log_kappa_b = 1.7917594692
# builder.init_params.log_kappa_w = 1.4552872326


# change the default sampler values
builder.kernels = [
    # gs.NUTSKernel(
    #     [
    #         "beta",
    #         "log_variance",
    #         "weights_unconst",
    #     ],
    # ),
    gs.HMCKernel(
        [
            "beta",
            "log_variance",
            "weights_unconst",
        ],
    ),
    gs.RWKernel(
        [
            "log_kappa_b",
            "log_kappa_w",
        ],
    ),
]

model = builder.build()
```

## Sample

sample from the posterior

```{python}
engine = model.engine
engine.sample_all_epochs()
```

### Summarize

Summarize the posterior samples.

```{python}
results = engine.get_results()
res = gs.Summary.from_result(results, per_chain=False)
res
```

### Traceplots

Traceplots for the hyperparameters and regression coefficients.

```{python}
gs.plot_trace(results, include_warmup=True)
plt.show()
```

